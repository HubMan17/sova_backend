# telemetry_utils.py (–∏–ª–∏ —Ä—è–¥–æ–º —Å APIView)
from django.utils import timezone
from datetime import datetime
from app.models import Board
from .notify import tg_send

def _power_on_criteria(p: dict) -> bool:
    # –°—á–∏—Ç–∞–µ–º ¬´–≤–∫–ª—é—á–∏–ª—Å—è¬ª, –µ—Å–ª–∏ –µ—Å—Ç—å —è–≤–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:
    if p.get("arm") in (1, True):               # –≤–∑–≤–µ–¥—ë–Ω
        return True
    if p.get("mode"):                           # —Ä–µ–∂–∏–º –∏–∑–≤–µ—Å—Ç–µ–Ω
        return True
    if p.get("gps"):                            # –µ—Å—Ç—å GPS —Ñ–∏–∫—Å–∞—Ü–∏—è ("3D"/"2D")
        return True
    if p.get("volt") is not None:
        try:
            return float(p["volt"]) > 10.0
        except Exception:
            pass
    if any(p.get(k) is not None for k in ("gs", "airspd", "yaw", "hdg")):
        return True
    if p.get("lat") is not None and p.get("lon") is not None:
        return True
    return False

def maybe_mark_power_on(board: Board, payload: dict, ts):
    if ts is None:
        ts = timezone.now()

    board.last_telemetry_at = ts

    # –æ–±–Ω–æ–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—ã–µ –ø–æ–ª—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    if payload.get("mode"): board.last_mode = payload["mode"]
    if payload.get("volt") is not None:
        try: board.last_volt = float(payload["volt"])
        except Exception: pass

    if board.is_online:
        board.save(update_fields=["last_telemetry_at", "last_mode", "last_volt"])
        return False

    if _power_on_criteria(payload):
        board.is_online = True
        board.online_since = ts
        board.save(update_fields=["is_online", "online_since", "last_telemetry_at", "last_mode", "last_volt"])
        # —Ç—É—Ç –º–æ–∂–µ—Ç–µ –¥–µ—Ä–Ω—É—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –¢–ì
        from .notify import tg_send
        tg_send(f"üü¢ –ë–æ—Ä—Ç #{board.boat_number} –≤–∫–ª—é—á–∏–ª—Å—è ‚Ä¶")
        return True

    board.save(update_fields=["last_telemetry_at", "last_mode", "last_volt"])
    return False
