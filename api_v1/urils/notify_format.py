# -*- coding: utf-8 -*-
from __future__ import annotations
from dataclasses import dataclass

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã (–º–æ–∂–µ—à—å –ø–æ–¥—Ç—è–Ω—É—Ç—å –∏–∑ settings/env)
ARM_COUNT_LIMIT = 10           # –∫–æ–ª-–≤–æ ARM
ARM_TIME_LIMIT_S = 5*60 + 50   # 5–º 50—Å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
QSTAB_TIME_LIMIT_S = 30        # 30—Å



NBSP = "\u00A0"

# –ü–æ—Ä–æ–≥–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
THRESHOLDS = (50, 75, 90, 100)


def fmt_hms(seconds: float | int) -> str:
    s = int(max(0, round(float(seconds or 0))))
    h, m = divmod(s, 3600)
    m, s = divmod(m, 60)
    if h:  return f"{h}—á {m}–º {s}—Å"
    if m:  return f"{m}–º {s}—Å"
    return f"{s}—Å"


def pct(value: float, limit: float) -> int:
    if not limit:
        return 0
    return max(0, min(100, int(round((value / limit) * 100))))


def reached_levels(p: int) -> list[int]:
    """–ö–∞–∫–∏–µ –ø–æ—Ä–æ–≥–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã –¥–∞–Ω–Ω—ã–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º."""
    return [t for t in THRESHOLDS if p >= t]


@dataclass
class ArmProgress:
    arms: int          # –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ARM (—à—Ç)
    arm_sec: float     # –≤—Ä–µ–º—è –ø–æ–¥ ARM (—Å–µ–∫)
    qstab_sec: float   # –≤—Ä–µ–º—è –≤ QSTAB (—Å–µ–∫)

    # –ª–∏–º–∏—Ç—ã (–º–æ–≥—É—Ç –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —Å–Ω–∞—Ä—É–∂–∏, –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏)
    limit_arms: int = 10
    limit_arm_sec: float = 350.0   # 5–º 50—Å
    limit_qstab_sec: float = 30.0

    @property
    def count_pct(self) -> float:
        return 0.0 if self.limit_arms <= 0 else min(100.0, 100.0 * self.arms / self.limit_arms)

    @property
    def time_pct(self) -> float:
        return 0.0 if self.limit_arm_sec <= 0 else min(100.0, 100.0 * self.arm_sec / self.limit_arm_sec)

    @property
    def qstab_pct(self) -> float:
        return 0.0 if self.limit_qstab_sec <= 0 else min(100.0, 100.0 * self.qstab_sec / self.limit_qstab_sec)


def _fmt_dur(sec: float | int) -> str:
    s = max(0, int(round(float(sec or 0))))
    m, ss = divmod(s, 60)
    h, m = divmod(m, 60)
    if h:
        return f"{h}—á{NBSP}{m}–º{NBSP}{ss}—Å"
    if m:
        return f"{m}–º{NBSP}{ss}—Å"
    return f"{ss}—Å"


def _left(used: float, limit_: float) -> int:
    return max(0, int(round((limit_ or 0) - (used or 0))))


def _current_threshold(pct: float) -> int | None:
    """–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¢–ï–ö–£–©–ò–ô –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–π –ø–æ—Ä–æ–≥ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–∑ THRESHOLDS, –Ω–µ –≤—ã—à–µ pct), –ª–∏–±–æ None"""
    for t in reversed(THRESHOLDS):
        if pct >= t - 1e-9:
            return t
    return None


def build_arm_report_message(
    *,
    ts_str: str,          # "HH:MM:SS dd.mm.yyyy"
    board_label: str,     # "#133"
    progress: ArmProgress
) -> str:
    pr = progress

    # –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
    count_pct = int(round(pr.count_pct))
    time_pct = int(round(pr.time_pct))
    qstab_pct = int(round(pr.qstab_pct))

    left_count = max(0, pr.limit_arms - pr.arms)
    left_arm_sec = _left(pr.arm_sec, pr.limit_arm_sec)
    left_qstab_sec = _left(pr.qstab_sec, pr.limit_qstab_sec)

    count_pair = f"{pr.arms}{NBSP}/{NBSP}{pr.limit_arms}"
    arm_pair = f"{_fmt_dur(pr.arm_sec)}{NBSP}/{NBSP}{_fmt_dur(pr.limit_arm_sec)}"
    qstab_pair = f"{_fmt_dur(pr.qstab_sec)}{NBSP}/{NBSP}{_fmt_dur(pr.limit_qstab_sec)}"

    # –∏—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞-–Ω–∞—Ä—É—à–µ–Ω–∏—è
    violations: list[str] = []
    if pr.arms >= pr.limit_arms:
        violations.append(f"–¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ ARM-—Å—á—ë—Ç—á–∏–∫—É ({count_pair})")
    if pr.arm_sec >= pr.limit_arm_sec:
        violations.append(f"–¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ ARM-–≤—Ä–µ–º—è ({arm_pair})")
    if pr.qstab_sec >= pr.limit_qstab_sec:
        violations.append(f"–¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ QSTAB-–≤—Ä–µ–º—è ({qstab_pair})")

    viol_block = "\n".join(f"‚Ä¢ {v}" for v in violations) if violations else "‚Äî –ù–µ—Ç"

    # –¢–ï–ö–£–©–ò–ï –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–µ –ø–æ—Ä–æ–≥–∏ (–Ω–µ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö, –∞ —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π)
    th_count = _current_threshold(count_pct)
    th_time = _current_threshold(time_pct)
    th_qstab = _current_threshold(qstab_pct)

    th_count_line = f"‚Ä¢ –ü–æ—Ä–æ–≥ ARM-—Å—á—ë—Ç—á–∏–∫–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: {th_count}%" if th_count else "‚Ä¢ –ü–æ—Ä–æ–≥ ARM-—Å—á—ë—Ç—á–∏–∫–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: ‚Äî"
    th_time_line = f"‚Ä¢ –ü–æ—Ä–æ–≥ ARM-–≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: {th_time}%" if th_time else "‚Ä¢ –ü–æ—Ä–æ–≥ ARM-–≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: ‚Äî"
    th_qstab_line = f"‚Ä¢ –ü–æ—Ä–æ–≥ QSTAB-–≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: {th_qstab}%" if th_qstab else "‚Ä¢ –ü–æ—Ä–æ–≥ QSTAB-–≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: ‚Äî"

    # —Å–æ–æ–±—â–µ–Ω–∏–µ
    return (
        "üõ† <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç</b>\n"
        f"‚è±Ô∏è <b>–í—Ä–µ–º—è:</b> {ts_str}\n"
        f"üìü <b>–ë–æ—Ä—Ç:</b> {board_label}\n\n"
        "üü• <b>–ù–∞—Ä—É—à–µ–Ω–∏—è:</b>\n"
        f"{viol_block}\n\n"
        "üü© <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n"
        f"‚Ä¢ –ö–æ–ª-–≤–æ ARM: <b>{count_pct}%</b> ({count_pair}), –∑–∞–ø–∞—Å: {left_count} —à—Ç\n"
        f"‚Ä¢ –í—Ä–µ–º—è –ø–æ–¥ ARM: <b>{time_pct}%</b> ({arm_pair}), –∑–∞–ø–∞—Å: {_fmt_dur(left_arm_sec)}\n"
        f"‚Ä¢ –í—Ä–µ–º—è –≤ QSTAB: <b>{qstab_pct}%</b> ({qstab_pair}), –∑–∞–ø–∞—Å: {_fmt_dur(left_qstab_sec)}\n\n"
        "<b>–ü–æ—Ä–æ–≥–∏:</b>\n"
        f"{th_count_line}\n"
        f"{th_time_line}\n"
        f"{th_qstab_line}"
    )