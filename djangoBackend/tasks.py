from datetime import timedelta
from django.utils import timezone
from celery import shared_task
from django.db.models import Q
from app.models import Board
from api_v1.urils.notify import tg_send  # –ø–æ–ø—Ä–∞–≤—å –ø—É—Ç—å, –µ—Å–ª–∏ notify –ª–µ–∂–∏—Ç –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ

@shared_task(bind=True, autoretry_for=(Exception,), retry_backoff=True, max_retries=3)
def check_offline_boards(self, inactive_minutes: int = 3) -> int:
    now = timezone.now()
    threshold = now - timedelta(minutes=inactive_minutes)

    candidates = Board.objects.filter(
        is_online=True
    ).filter(
        Q(last_telemetry_at__lt=threshold) | Q(last_telemetry_at__isnull=True)
    )

    transitioned = 0
    for board in candidates.iterator():
        if not board.is_online:
            continue
        board.is_online = False
        board.offline_since = now

        # –∞–Ω—Ç–∏—Å–ø–∞–º: —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –æ—Ñ—Ñ–ª–∞–π–Ω-—Å–µ—Å—Å–∏—é
        if not board.last_offline_notified_at or (board.offline_since and board.last_offline_notified_at < board.offline_since):
            ts_str = now.strftime("%Y-%m-%d %H:%M:%S")
            msg = (
                f"üî¥ <b>–ë–æ—Ä—Ç #{board.boat_number} –æ—Ñ–ª–∞–π–Ω</b>\n"
                f"‚è± <b>–ü–æ—Å–ª–µ–¥–Ω—è—è —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—è ‚â•</b> {inactive_minutes} –º–∏–Ω –Ω–∞–∑–∞–¥\n"
                f"üìÖ <b>–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ:</b> {ts_str}"
            )
            try:
                tg_send(msg)
            except Exception:
                pass
            board.last_offline_notified_at = now

        board.save(update_fields=["is_online", "offline_since", "last_offline_notified_at"])
        transitioned += 1

    return transitioned